// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                @id @default(autoincrement())
  email       String             @unique
  displayName String             @unique
  chatMessage ChatMessage[]
  joinedRoom  ChatUserRelation[]
  ownedRoom   ChatRoom[]
}

model ChatRoom {
  id           Int                @id @default(autoincrement())
  roomName     String             @unique
  roomType     RoomType           @default(PUBLIC)
  roomPassword String?
  owner        User               @relation(fields: [ownerId], references: [id])
  ownerId      Int
  createdAt    DateTime           @default(now())
  chatMessage  ChatMessage[]
  roomMember   ChatUserRelation[]
}

enum RoomType {
  PUBLIC
  PRIVATE
  LOCKED
}

// userはsetDefaultで"削除されたユーザー"的な動作出来るかも。
model ChatUserRelation {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoom   ChatRoom   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  memberType MemberType @default(MEMBER)
  endAt      DateTime? // userTypeがBANNED,MUTEDの時にのみ参照される。

  @@id([userId, chatRoomId])
}

enum MemberType {
  MEMBER
  ADMIN
  BANNED
  MUTED
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     Int?
  createdAt  DateTime @default(now())
  content    String
}
