// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  displayName       String              @unique
  intraId           Int                 @unique
  chatMessage       ChatMessage[]
  joinedRoom        ChatUserRelation[]
  ownedRoom         ChatRoom[]
  chatroomAttribute ChatUserAttribute[]
  followingUser     FriendRelation[]    @relation("user")
  followedUser      FriendRelation[]    @relation("targetUser")
  blockingUser      BlockRelation[]     @relation("user")
  blockedUser       BlockRelation[]     @relation("targetUser")
}

model FriendRelation {
  user         User @relation(name: "user", fields: [userId], references: [id])
  userId       Int
  targetUser   User @relation(name: "targetUser", fields: [targetUserId], references: [id])
  targetUserId Int

  @@id([userId, targetUserId])
}

model BlockRelation {
  user         User @relation(name: "user", fields: [userId], references: [id])
  userId       Int
  targetUser   User @relation(name: "targetUser", fields: [targetUserId], references: [id])
  targetUserId Int

  @@id([userId, targetUserId])
}

model ChatRoom {
  id              Int                 @id @default(autoincrement())
  roomName        String              @unique
  roomType        RoomType            @default(PUBLIC)
  roomPassword    String?
  owner           User                @relation(fields: [ownerId], references: [id])
  ownerId         Int
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  chatMessage     ChatMessage[]
  roomMember      ChatUserRelation[]
  memberAttribute ChatUserAttribute[]
}

enum RoomType {
  PUBLIC
  PRIVATE
  LOCKED
  DM
}

model ChatUserRelation {
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  chatRoom   ChatRoom   @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  memberType MemberType @default(MEMBER)

  @@id([userId, chatRoomId])
}

model ChatUserAttribute {
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  chatRoom    ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId  Int
  bannedEndAt DateTime @default(now())
  mutedEndAt  DateTime @default(now())
  readenUntil Int      @default(0)

  @@id([userId, chatRoomId])
}

enum MemberType {
  MEMBER
  ADMIN
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  user       User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId     Int?
  createdAt  DateTime @default(now())
  content    String
}
